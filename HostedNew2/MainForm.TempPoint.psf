<File version="3.2">
  <FileID>9df26cca-a3e5-4830-8f36-be78cd97af0f</FileID>
  <Preview>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
UkpVKAMApZRSqkIZACillFIVygBAKaWUqlAGAEoppVSFMgBQSimlKpQBgFJKKVWhDACUUkqpCmUA
oJRSSlUoAwCllFKqQhkAKKWUUhXKAEAppZSqUAYASimlVIUyAFBKKaUqlAGAUkopVaEMAJRSSqkK
ZQCglFJKVSgDAKWUUqpCGQAopZRSFcoAQCmllKpQBgBKKaVUhTIAUEoppSqUAYBSSilVoQwAlFJK
qQplAKCUUkpVKAMApZRSqkIZACillFIVygBAKaWUqlAGAEoppVSFMgBQSimlKpQBgFJKKVWhDACU
UkqpCmUAoJRSSlUoAwCllFKqQhkAKKWUUhXKAEAppZSqUAYASimlVIUyAFBKKaUqlAGAUkopVaEM
AJRSSqkKZQCglFJKVSgDAKWUUqpCGQAopZRSFcoAQCmllKpQBgBKKaVUhTIAUEoppSqUAYBSSilV
oQwAlFJKqQplAKCUUkpVKAMApZRSqkIZACillFIVygBAKaWUqlAGAEoppVSFMgBQSimlKpQBgFJK
KVWhDACUUkqpCmUAoJRSSlUoAwCllFKqQhkAKKWUUhXKAEAppZSqUAYASimlVIUyAFBKKaUqlAGA
UkopVaEMAJRSSqkKZQCglFJKVSgDAKWUUqpCGQAopZRSFcoAQCmllKpQBgBKKaVUhTIAUEoppSqU
AYBSSilVoQwAlFJKqQplAKCUUkpVKAMApZRSqkIZACillFIVygBAKaWUqlAGAEoppVSFMgBQSiml
KpQBgFJKKVWhDACUUkqpCmUAoJRSSlUoAwCllFKqQhkAKKWUUhXKAEAppZSqUAYASimlVIUyAFBK
KaUqlAGAUkopVaEMAJRSSqkKZQCglFJKVSgDAKWUUqpCGQAopZRSFcoAQCmllKpQBgBKKaVUhTIA
UEoppSqUAYBSSilVoQwAlFJKqQplAKCUUkpVKAMApZRSqkIZACillFIVygBAKaWUqlAGAEoppVSF
MgBQSimlKpQBgFJKKVWhDACUUkqpCmUAoJRSSlUoAwCllFKqQhkAKKWUUhXKAEAppZSqUAYASiml
VIUyAFBKKaUqlAGAUkopVaEMAJRSSqkKZQCglFJKVSgDAKWUUqpCGQAopZRSFcoAQCmllKpQBgBK
KaVUhTIAUEoppSqUAYBSSilVoQwAlFJKqQplAKCUUkpVKAMApZRSqkIZACillFIVygBAKaWUqlAG
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
v/vd/w/GE2r2HGeIrQAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[	$formHostedNew2_Load = {
		$formHostedNew2.Text = $updateFolderPath
		Get-SiteObjects | %{
			$siteObj = $_
			$xmlDirPath = $siteObj.XmlFldr
			if (!(Test-Path $siteObj.LogFolder)) { md $siteObj.LogFolder }
			if (!(test-path $xmlDirPath)) { md $xmlDirPath }
			$siteObj | Export-CliXml -Path ("$xmlDirPath\" + $siteObj.DbName + '.xml')
			if (!(test-path "$xmlDirPath\steps.xml")) { Copy-Item ($siteObj.UpdatePath + '\XMLFiles\steps.xml') -Destination $siteObj.XmlFldr }
			if ($TextBoxdbVersion.Text -eq '')
			{
				$buttonSelect.Enabled = $false
				$buttonLaunch.Enabled = $false
			}
		}
		
		$siteObjects = @()
		gci "$updateFolderPath\MultiBank" -Recurse -Filter "*.xml" |
		Where-Object -Property name -ne 'steps.xml' |
		Where-Object -Property name -ne 'PublishXml.xml' | %{
			$siteObjects += Import-Clixml $_.FullName
		}
		
		$script:dtable = New-Object System.Data.DataTable
		Load-Datagrid
		$datagridview1.Height = $formHostedNew2.Height - $groupbox1.Height - 50
		Check-GoldDb
<#	if (Test-Path "$updateFolderPath\SqlScripts\DisableReIndex.txt")
	{
		if ((Get-Content "$updateFolderPath\SqlScripts\DisableReIndex.txt") -eq 'Y') { $checkboxDisableReindex.checked = $true }
		elseif ((Get-Content "$updateFolderPath\SqlScripts\DisableReIndex.txt") -eq 'N') { $checkboxDisableReindex.checked = $false }
	}#>
	}
	
	$buttonCopyVersion_Click = {
		$TextBoxdbVersion.Text = $updateVersion
		foreach ($row in $datagridview1.Rows)
		{
			$rowIndex = $row.Index
			if ($datagridview1.Rows[$rowIndex].cells[5].value -eq '0')
			{
				$datagridview1.Rows[$rowIndex].cells[5].value = '1'
				Set-BackColor -rowIndex $rowIndex -step RestoreDb -green $true
			}
		}
	}
	
	$buttonLaunch_Click = {
		$statusbar1.Text = 'Running'
		Try
		{
			if ((Check-GoldDb) -eq $false)
			{
				$richtextbox1.text = "Cannot launch update. Gold DB not restored."
				$buttonLaunch.Enabled = $false
				Return
			}
			if ($selectedRows -eq $null)
			{
				$richtextbox1.Text += "Select some rows first!"
				$buttonLaunch.Enabled = $false
				Return
			}
			$script:selectedRows | % {
				$row = $_
				$statusbar1.Text = "Running $($row[0])."
				$dbName = $row.Dbname
				$rowIndex = ($datagridview1.Rows.cells | where -Property value -EQ ($dbName)).rowindex
				$updateObj = Import-Clixml -Path "$updateFolderPath\multibank\$dbName\XmlFiles\$dbName.xml"
				if ($row['Backup'] -eq '0')
				{
					$step = 'Backup'
					$statusbar1.Text = "Running $step on $($updateObj.City)"
					Set-BackColor -rowIndex $rowIndex -step $step -green $true
					$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns[$step])
					$returnObj = Invoke-BackupDb_ps1
					if ($returnObj.Status -eq 'complete')
					{
						Set-XmlData -Element (Convert-Step $step) -XmlPath $updateObj.StepsPath -value '1'
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = '1'
					}
					elseif ($returnObj.Status -eq 'failed')
					{
						Set-BackColor -rowIndex $rowIndex -step $step -clear $true
						throw ("$step failed on DB $dbName`r" + $returnObj.LogData)
					}
				}
				
				if ($row['RunSqlPkg'] -eq '0')
				{
					$step = 'RunSqlPkg'
					$statusbar1.Text = "Running $step on $($updateObj.City)"
					Set-BackColor -rowIndex $rowIndex -step $step -green $true
					$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns[$step])
					$returnObj = Invoke-RunSqlPackage_ps1
					if ($returnObj.Status -eq 'complete')
					{
						Set-XmlData -Element (Convert-Step $step) -XmlPath $updateObj.StepsPath -value '1'
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = '1'
					}
					elseif ($returnObj.Status -eq 'failed')
					{
						Set-BackColor -rowIndex $rowIndex -step $step -clear $true
						throw $returnObj.LogData
					}
				}
				
				if ($row['TagMap'] -eq '0')
				{
					$step = 'TagMap'
					$statusbar1.Text = "Running $step on $($updateObj.City)"
					Set-BackColor -rowIndex $rowIndex -step $step -green $true
					$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns[$step])
					$returnObj = Invoke-TagMapRefresh_ps1 -GoldDbName $InfoObj.BakFileName
					if ($returnObj.Status -eq 'complete')
					{
						Set-XmlData -Element (Convert-Step $step) -XmlPath $updateObj.StepsPath -value '1'
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = '1'
					}
					elseif ($returnObj.Status -eq 'failed')
					{
						Set-BackColor -rowIndex $rowIndex -step $step -clear $true
						throw $returnObj.LogData
					}
				}
				
				if ($row['DataMig'] -eq '0')
				{
					$step = 'DataMig'
					$statusbar1.Text = "Running $step on $($updateObj.City)"
					Set-BackColor -rowIndex $rowIndex -step $step -green $true
					$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns[$step])
					$returnObj = Invoke-DataMigration_ps1 -GoldDbName $InfoObj.BakFileName
					if ($returnObj.Status -eq 'complete')
					{
						Set-XmlData -Element (Convert-Step $step) -XmlPath $updateObj.StepsPath -value '1'
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = '1'
					}
					elseif ($returnObj.Status -eq 'failed')
					{
						Set-BackColor -rowIndex $rowIndex -step $step -clear $true
						throw $returnObj.LogData
					}
				}
				
				if ($row['SqlScr'] -eq '0')
				{
					$step = 'SqlScr'
					$statusbar1.Text = "Running $step on $($updateObj.City)"
					Set-BackColor -rowIndex $rowIndex -step $step -green $true
					$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns[$step])
					$returnObj = Invoke-SqlScripts_ps1
					if ($returnObj.Status -eq 'complete')
					{
						Set-XmlData -Element (Convert-Step $step) -XmlPath $updateObj.StepsPath -value '1'
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = '1'
					}
					elseif ($returnObj.Status -eq 'failed')
					{
						Set-BackColor -rowIndex $rowIndex -step $step -clear $true
						throw $returnObj.LogData
					}
				}
				
				if ($row['UpdSite'] -eq '0')
				{
					$currentVersion = $row['version']
					$prevVersion = gc "$updateFolderPath\previousversion.txt"
					#if ($currentVersion -ne $prevVersion) { throw "Current version $currentVersion is not equal to previous version $prevVersion"}
					$step = 'UpdSite'
					$statusbar1.Text = "Running $step on $($updateObj.City)"
					Set-BackColor -rowIndex $rowIndex -step $step -green $true
					$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns[$step])
					$global:sitesStopped = $true
					$returnObj = Invoke-UpdateWebsite_ps1
					if ($returnObj.Status -eq 'complete')
					{
						Set-XmlData -Element (Convert-Step $step) -XmlPath $updateObj.StepsPath -value '1'
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = '1'
						$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns['Version'])
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = (gci "$($updateObj.WebSitePath)\bin\OnBoardSharedServices.dll").versionInfo.fileversion
					}
					elseif ($returnObj.Status -eq 'failed')
					{
						Set-BackColor -rowIndex $rowIndex -step $step -clear $true
						throw $returnObj.LogData
					}
				}
				
				if ($row['UpdAdd'] -eq '0')
				{
					$step = 'UpdAdd'
					$statusbar1.Text = "Running $step on $($updateObj.City)"
					Set-BackColor -rowIndex $rowIndex -step $step -green $true
					$colIndex = $datagridview1.Columns.IndexOf($datagridview1.Columns[$step])
					$returnObj = Invoke-UpdateAdd_ps1
					if ($returnObj.Status -eq 'complete')
					{
						Set-XmlData -Element (Convert-Step $step) -XmlPath $updateObj.StepsPath -value '1'
						$dataGridView1.rows[$rowIndex].cells[$colIndex].Value = '1'
					}
					elseif ($returnObj.Status -eq 'failed')
					{
						Set-BackColor -rowIndex $rowIndex -step $step -clear $true
						throw $returnObj.LogData
					}
				}
			}
		}
		catch
		{
			$richtextbox1.Text += Format-Message -errData $_
		}
		Finally
		{
			$datagridview1.Rows | %{ $_.Cells[0].style.forecolor = 'Black' }
			$statusbar1.Text = 'Stopped'
		}
	}
	
	$buttonRestoreDBs_Click = {
		Try
		{
			$arrySqlinst = @()
			$arrrestored = @()
			$goldDbPath = ("$updateFolderPath\DBDeploy\GoldDB\" + $InfoObj.BakFileName + "$updateVersion.bak")
			if ($env:USERDNSDOMAIN -like "*jhahosting.com")
			{
				$xmlFiles = gci "$updateFolderPath\MultiBank" -Recurse -Filter "*.xml" | where { ($_.name -Like "ch*") -or ($_.name -Like "al*") } | select -ExpandProperty FullName
			}
			else
			{
				$xmlFiles = gci "$updateFolderPath\MultiBank" -Recurse -Filter "*.xml" | where { ($_.name -Like "dep*") } | select -ExpandProperty FullName
			}
			
			$xmlFiles | %{
				$sqlInst = (Import-Clixml $_).sqlInstance
				[array]$arrySqlinst += $sqlInst
			}
			for ($i = 0; $i -lt ($arrySqlinst.count - 1); $i++)
			{
				if ($($arrySqlinst)[$i] -notin $arrrestored)
				{
					$richtextbox1.Text += "`rStarting restore of $($InfoObj.BakFileName)$($updateVersion).bak on $($arrySqlinst[$i])`r"
					$returnObj = Rest-SQLDatabase -SqlBackupFile $goldDbPath -SqlInst $arrySqlinst[$i] -SqlDatabase $InfoObj.BakFileName -SqlDatabaseUser onboard -SqlServerLoginPassword $regInfo.GetValue('DbPassword')
					$arrrestored += $($arrySqlinst)[$i]
					if ($returnObj.Status -eq 'failed') { throw $returnObj.LogData }
					if ($returnObj.Logdata -like '*CSISUpportSilverlake*')
					{
						$labelCsiSLRst.Visible = $true
						$TextBoxdbVersion.Text = "$updateVersion"
						$richtextbox1.AppendText($returnObj.logdata)
						$datagridview1.Rows | %	{
							$datagridview1.Rows[$_.Index].cells[5].value = '1'
							Set-BackColor -rowIndex $_.index -step 'RestoreDb' -green $true
						}
					}
					elseif ($returnObj.Logdata -like '*WKSupportSilverlake*')
					{
						$labelWkSLRst.Visible = $true
						$TextBoxdbVersion.Text = "$updateVersion"
						$richtextbox1.AppendText($returnObj.logdata)
						$datagridview1.Rows | %	{
							$datagridview1.Rows[$_.Index].cells[5].value = '1'
							Set-BackColor -rowIndex $_.index -step 'RestoreDb' -green $true
						}
					}
				}
			}
		}
		Catch
		{
			$richtextbox1.AppendText("Restore of DB $($dbToRestore) failed.")
			$richtextbox1.AppendText((Format-Message $_).full)
			$statusbar1.Text = 'Stopped'
		}
	}
	
	$buttonSelect_Click = {
		for ($j = 0; $j -lt $row.Cells.Count; $j++)
		{
			$row.cells[0].Style.ForeColor = 'Blue'
		}
		$script:selectedRows = $null
		$richtextbox1.Clear()
		foreach ($row in $datagridview1.SelectedRows)
		{
			$hash = ([Ordered] @{
					"City" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('City')].Value
					"Inst" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('Institution')].Value
					"DbName" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('DbName')].Value
					"Version" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('Version')].Value
					"Backup" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('Backup')].Value
					"RestoreDb" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('RestoreDb')].Value
					"RunSqlPkg" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('RunSqlPkg')].Value
					"TagMap" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('TagMap')].Value
					"DataMig" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('DataMig')].Value
					"SqlScr" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('SqlScr')].Value
					"UpdSite" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('UpdSite')].Value
					"UpdAdd" = $row.cells[($datagridview1.Columns | Select-Object -ExpandProperty HeaderText).indexOf('UpdAdd')].Value
				})
			[array]$script:selectedRows += $hash
			$script:srows = $selectedRows.Count
			for ($j = 0; $j -lt $row.Cells.Count; $j++)
			{
				$row.cells[0].Style.ForeColor = 'Blue'
			}
		}
		[array]$script:selectedRows
		$datagridview1.ClearSelection()
		$buttonLaunch.Enabled = $true
	}
	
	$datagridview1_CellValueChanged = [System.Windows.Forms.DataGridViewCellEventHandler]{
		if ($datagridview1.CurrentCell.IsInEditMode)
		{
			if (($datagridview1.CurrentCell.Value -notin ('0' .. '1')) -or ($datagridview1.CurrentCell.Value.length -ne 1))
			{
				$datagridview1.CurrentCell.Value = $script:oldCellValue
				Show-Msg -msgName 'Not Valid' -msgText 'Values must be a 0 or 1'
				$datagridview1.CancelEdit()
			}
			if ($datagridview1.CurrentCell.Value -ne $script:oldCellValue)
			{
				$currentRow = $datagridview1.CurrentCell.OwningRow.Index
				$dbname = $datagridview1.rows[$currentRow].Cells[2].Value
				$step = $datagridview1.CurrentCell.OwningColumn.HeaderText
				$bankInfo = Import-Clixml "$updateFolderPath\multibank\$dbName\XmlFiles\$dbName.xml"
				Set-XmlData -Element (Convert-Step $step) -XmlPath $bankInfo.stepsPath -Node Data -value $datagridview1.CurrentCell.Value
				if ($datagridview1.CurrentCell.Value -eq '1') { Set-BackColor -rowIndex $datagridview1.rows[$currentRow].index -step $step -green $true }
				elseif ($datagridview1.CurrentCell.Value -eq '0') { Set-BackColor -rowIndex $datagridview1.rows[$currentRow].index -step $step -clear $true }
			}
		}
	}
	
	$datagridview1_CellBeginEdit = [System.Windows.Forms.DataGridViewCellCancelEventHandler]{
		$script:oldCellValue = $datagridview1.CurrentCell.Value
	}
	
	$datagridview1_CellValidating = [System.Windows.Forms.DataGridViewCellValidatingEventHandler]{
<#	if ($script:lastcolumn -lt 4) { }
	elseif (($datagridview1.CurrentCell.Value -notin ('0' .. '1')) -or ($datagridview1.CurrentCell.Value.length -ne 1))
	{
		$datagridview1.CurrentCell.Value = $script:oldCellValue
		$richtextbox1.Text += "Values must be a 0 or 1`r"
		$datagridview1.CancelEdit()
	}
#>
	}
	
	$datagridview1_CurrentCellDirtyStateChanged = {
		if ($datagridview1.CurrentCell.ColumnIndex -lt 4)
		{
			$datagridview1.CancelEdit()
		}
	}
	
	$datagridview1_CellLeave = [System.Windows.Forms.DataGridViewCellEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		$script:lastCell = $datagridview1.CurrentCell
		$script:lastcolumn = $datagridview1.CurrentCell.ColumnIndex
	}
	
	$TextBoxdbVersion_TextChanged = {
		if ($TextBoxdbVersion.Text -eq $updateVersion)
		{
			$buttonLaunch.Enabled = $true
			$buttonSelect.Enabled = $true
			$datagridview1.Enabled = $true
			$datagridview1.rows[0].Selected = $true
			$datagridview1.ClearSelection()
		}
		Elseif ($TextBoxdbVersion.Text -ne $updateVersion)
		{
			$buttonLaunch.Enabled = $false
			$buttonSelect.Enabled = $false
			$datagridview1.rows[0].Selected = $false
		}
	}
	
	$buttonSelect_EnabledChanged = {
		if ($buttonSelect.Enabled -eq $false)
		{
			$buttonSelect.ForeColor = 'LightSlateGray'
			$buttonSelect.BackColor = [System.Drawing.Color]::FromArgb(255, 255, 255) #Transparent
		}
		
		if ($buttonSelect.Enabled -eq $true)
		{
			$buttonSelect.ForeColor = 'Black'
			$buttonSelect.BackColor = [System.Drawing.Color]::FromArgb(224, 224, 224) #Gray
		}
	}
	
	$buttonLaunch_EnabledChanged = {
		if ($buttonLaunch.Enabled -eq $false)
		{
			$buttonLaunch.ForeColor = 'LightSlateGray'
			$buttonLaunch.BackColor = [System.Drawing.Color]::FromArgb(255, 255, 255) #Transparent
		}
		
		if ($buttonLaunch.Enabled -eq $true)
		{
			$buttonLaunch.ForeColor = 'Black'
			$buttonLaunch.BackColor = [System.Drawing.Color]::FromArgb(224, 224, 224) #Gray
		}
	}
	
	$buttonClearSelected_Click = { Clear-Selected }
	
	$datagridview1_Sorted = {
		Clear-Selected
		$datagridview1
		$datagridview1.Rows | %{
			$rowIndex = $_.Index
			for ($colIndex = $datagridview1.columns["Backup"].Index; $colIndex -lt $datagridview1.columns["UpdAdd"].Index; $colIndex++)
			{
				$cellValue = $dataGridView1.rows[$rowIndex].cells[$colIndex].Value
				if ($dataGridView1.rows[$rowIndex].cells[$colIndex].Value -eq '0') { $dataGridView1.rows[$rowIndex].cells[$colIndex].Style.BackColor = [System.Drawing.Color]::FromArgb(255, 255, 255) }
				if ($dataGridView1.rows[$rowIndex].cells[$colIndex].Value -eq '1') { $dataGridView1.rows[$rowIndex].cells[$colIndex].Style.BackColor = 'LightGreen' }
			}
		}
	}
	
	$statusbar1_DoubleClick = {
		if ($buttonStartSites.Visible -eq $true) { $buttonStartSites.Visible = $false }
		elseif ($buttonStartSites.Visible -eq $false) { $buttonStartSites.Visible = $true }
	}
	
	$buttonStartSites_Click = {
		gci iis:\sites | where name -notlike default* | Start-Website
		$richtextbox1.Text = $null
		gci iis:\sites | where name -notlike default* | select name, state | %{ $richtextbox1.Text += "$($_.name) $($_.state)`r" }
	}
	
	$formHostedNew2_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		if ($sitesStopped)
		{
			$resp = Show-msg -msgName 'Start Websites' -msgText "Click 'Yes' to start websites.`rClick No to quit without starting sites." -msgType YesNo
			if ($resp -eq 'Yes')
			{
				$_.Cancel = $true
				gci iis:\sites | where name -notlike default* | Start-Website
				$richtextbox1.Text = $null
				gci iis:\sites | where name -notlike default* | select name, state | %{ $richtextbox1.Text += "$($_.name) $($_.state)`r" }
				Show-Msg -msgName 'Close form?' -msgText 'Click OK to close.'
				$_.Cancel = $false
				return
			}
			else { return }
		}
		
	}
	
	#$buttonExit_Click = {
	#		$resp = [System.Windows.Forms.MessageBox]::Show("Click cancel if you want to start websites before exiting.", "Did you start the websites?", [System.Windows.Forms.MessageBoxButtons]::OKCancel)
	#		if ($resp -eq 'cancel') { return }
	#		else { $formHostedNew.Close() }
	#}
	
<#$checkboxDisableReIndex_CheckedChanged = {
	if (!(Test-Path "$updateFolderPath\SqlScripts\DisableReindex.txt")) { New-Item -ItemType file -Path "$updateFolderPath\SqlScripts\DisableReindex.txt" }
	if ($checkboxDisableReindex.Checked -eq $true)
	{
		Set-Content "$updateFolderPath\SqlScripts\DisableReIndex.txt" -Value 'Y'
	}
	elseif ($checkboxDisableReindex.Checked -eq $false) { Set-Content "$updateFolderPath\SqlScripts\DisableReIndex.txt" -Value 'N' }
	
}
#>

]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">1</Line>
    <Line Disabled="True">2</Line>
    <Line Disabled="True">4</Line>
    <Line Disabled="True">17</Line>
    <Line Disabled="True">35</Line>
    <Line Disabled="True">90</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>